version: 2.1

executors:
  # define our execution environment
  py-exec:
    docker:
      - image: circleci/python:3.7.1
        environment:
          PIPENV_VENV_IN_PROJECT: true
          TEST_DATABASE_URL: postgresql://postgres@localhost/circle_test?sslmode=disable
      - image: circleci/postgres:11-alpine-postgis
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: circle
    working_directory: ~/pybuild
  python-node:
    docker:
      - image: jetbridge/ci-python37-node10

workflows:
  version: 2
  build_and_test:
    jobs:
      - checkout_code
      - deps:
          requires:
            - checkout_code
      - tests:
          requires:
            - deps
      - lint:
          requires:
            - deps
      - type_checks:
          requires:
            - deps
  deployment:
    # prepare deployment environment with python + nodejs + serverless
    # not master branch: test deployment to a brand new environment then tear it down
    # master branch: deploy to the "dev" stage (optional)
    jobs:
      - checkout_code
      - create_deployment_environment:
          requires:
            - checkout_code
      - package_deployment:
          requires:
            - create_deployment_environment
      - test_deploy:
          requires:
            - package_deployment
          filters:
            branches:
              ignore:
                - master
                - staging
                - prod
      # uncomment to auto-deploy master branch to dev stage
      # - deploy_dev:
      #     requires:
      #       - package_deployment
      #     filters:
      #       branches:
      #         only:
      #           - master

jobs:
  # git clone
  checkout_code:
    executor: py-exec
    working_directory: ~/pybuild
    steps:
      - checkout
      - save_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/pybuild

  # run pipenv install and save the .venv dir
  deps:
    executor: py-exec
    steps:
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.7/site-packages
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v2-dep-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run:
          command: |
            sudo pip install pipenv
            pipenv install --deploy --dev
      - save_cache: # cache Python dependencies using checksum of Pipfile as the cache-key
          key: v2-dep-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
          paths:
            - "~/pybuild/.venv"

  # pytest
  tests:
    executor: py-exec
    steps:
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v2-dep-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run:
          command: |
            mkdir test-reports
            pipenv run pytest --junitxml=test-reports/junit.xml
      - store_test_results:
          path: test-reports

  # mypy
  type_checks:
    executor: py-exec
    steps:
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v2-dep-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run:
          command: |
            pipenv run mypy .

  # flake8
  lint:
    executor: py-exec
    steps:
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v2-dep-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run:
          command: |
            pipenv run flake8

  # DEPLOYMENT:
  create_deployment_environment:
    # prepare serverless environment
    executor: python-node
    steps:
      - checkout
      - restore_cache:
          key: deps-v1-{{ checksum "package-lock.json" }}
      - run:
          name: Install serverless and plugins
          command: |
            npm i -g serverless
            npm install
      - run:
          name: Install python tools
          command: |
            python3.7 -m pip install pipenv awscli
      - save_cache:
          key: deps-v1-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
            - /usr/local/lib/node_modules
  package_deployment:
    # package serverless application for deployment
    steps:
      - run:
          name: Serverless package
          command: |
            pipenv lock --requirements > /dev/null 2>&1
            AWS_PROFILE= serverless package --package slspkg.zip
  test_deploy:
    executor: python-node
    steps:
      - run:
          name: Serverles deploy (test-${CIRCLE_BRANCH}-{{ .Environment.CIRCLE_SHA1 }})
          command: AWS_PROFILE= serverless deploy --package slspkg.zip --stage test-${CIRCLE_BRANCH}-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Initialize DB
          command: AWS_PROFILE= serverless invoke -f initDb --stage dev
      - run:
          name: Seed DB
          command: AWS_PROFILE= serverless invoke -f seed --stage dev
      - run:
          name: Wait on stack success or failure
          command: |
            # aws cloudformation wait stack-create-complete --stack-id
      - run:
          name: Remove test CloudFormation stack
          command: AWS_PROFILE= serverless remove --stage test-${CIRCLE_BRANCH}-{{ .Environment.CIRCLE_SHA1 }}
          when: always  # always remove stack when we're done
  deploy_dev:
    steps:
      - run:
          name: Serverles deploy (dev)
          command: AWS_PROFILE= serverless deploy --package slspkg.zip --stage dev
      - run:
          name: Initialize DB
          command: AWS_PROFILE= serverless invoke -f initDb --stage dev
      - run:
          name: Seed DB
          command: AWS_PROFILE= serverless invoke -f seed --stage dev
