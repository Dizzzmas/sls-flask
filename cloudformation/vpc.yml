Resources:
  VPC:  # VPC to hold everything
    Type: AWS::EC2::VPC
    Properties:
      Tags:
        - Key: "Name"
          Value: "#{AWS::StackName}"
      EnableDnsSupport: true  # disable for production
      EnableDnsHostnames: true  # disable for production
      CidrBlock: "10.0.0.0/16"
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        - Key: Name
          Value: "#{AWS::StackName} Public"
      VpcId:
        Ref: VPC
      AvailabilityZone: "#{AWS::Region}a"
      CidrBlock: "10.0.3.0/24"
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        - Key: Name
          Value: "#{AWS::StackName} Public"
      VpcId:
        Ref: VPC
      AvailabilityZone: "#{AWS::Region}b"
      CidrBlock: "10.0.1.0/24"
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        - Key: Name
          Value: "#{AWS::StackName} Public"
      VpcId:
        Ref: VPC
      AvailabilityZone: "#{AWS::Region}c"
      CidrBlock: "10.0.2.0/24"
  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SecurityGroup for Public Functions
      VpcId:
        Ref: VPC
  PublicSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "NAT-ed"
      SubnetIds:
      - Ref: PublicSubnetA
      - Ref: PublicSubnetB
      - Ref: PublicSubnetC

  # NATIP:  # IP for public NAT
  #   Type: AWS::EC2::EIP
  #   Properties:
  #     Domain: vpc
  # NatGateway:  # NAT GW in public subnet
  #   Type: AWS::EC2::NatGateway
  #   Properties:
  #     AllocationId: !GetAtt NATIP.AllocationId
  #     SubnetId: !Ref PublicSubnetPublic
  PublicRouteTable:  # Route table for internal routing + IGW
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "#{AWS::StackName} Public"
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW  # may be wrong

  PublicARouteTableAssociation:  # link public subnets to PublicRouteTable
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA
  PublicBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB
  PublicCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetC
  IGW:  # Internet GateWay
    Type: AWS::EC2::InternetGateway

  IGWAttachment:  # Connect IGW to our VPC
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

  # PublicRouteTable:  # Route table for routing to internet
  #   Type: AWS::EC2::RouteTable
  #   Properties:
  #     VpcId: !Ref VPC
  #     Tags:
  #       - Key: Name
  #         Value: "#{AWS::StackName} Public"
  # PublicRouteTableAssociation:  # connect public subnet (with NAT GW) to IGW
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref PublicRouteTable
  #     SubnetId: !Ref PublicSubnetPublic
