Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      Tags:
        - Key: "Name"
          Value: "#{AWS::StackName}"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: '10.${self:custom.network.classB}.0.0/16'

  # public subnet
  PublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: '10.${self:custom.network.classB}.0.0/20'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join
                 - '_'
                 - - '10.${self:custom.network.classB}.0.0/16'
                   - !Select [0, !GetAZs '']
                   - 'Public'
      - Key: Reach
        Value: public
  PublicSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: '10.${self:custom.network.classB}.32.0/20'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join
                 - '_'
                 - - '10.${self:custom.network.classB}.0.0/16'
                   - !Select [1, !GetAZs '']
                   - 'Public'
      - Key: Reach
        Value: public
  PublicSubnetC:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: '10.${self:custom.network.classB}.64.0/20'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join
                 - '_'
                 - - '10.${self:custom.network.classB}.0.0/16'
                   - !Select [2, !GetAZs '']
                   - 'Public'
      - Key: Reach
        Value: public
  PublicSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "NAT-ed"
      SubnetIds:
      - Ref: PublicSubnetA
      - Ref: PublicSubnetB
      - Ref: PublicSubnetC

  # route public subnet to IGW
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join
                 - '_'
                 - - '10.${self:custom.network.classB}.0.0/16'
                   - 'Public'
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
  PublicARouteTableAssociation:  # link public subnets to PublicRouteTable
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA
  PublicBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB
  PublicCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetC

  # internet gateway
  IGW:  # Internet GateWay
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: '10.${self:custom.network.classB}.0.0/16'
  IGWAttachment:  # Connect IGW to our VPC
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

  # SSH for bastion
  BastionSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: '#{AWS::StackName}'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: '0.0.0.0/0'
      Tags:
      - Key: Name
        Value: '#{AWS::StackName}-BastionSecurityGroup'

  # Database security
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Ingress for RDS Instance
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        # give access to our bastion host
        SourceSecurityGroupId: !Ref BastionSecurityGroup

  # Database subnets
  DBSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: '10.${self:custom.network.classB}.16.0/20'
      Tags:
      - Key: Name
        Value: !Join
                 - '_'
                 - - '10.${self:custom.network.classB}.0.0/16'
                   - !Select [0, !GetAZs '']
                   - 'Private'
      - Key: Reach
        Value: private
  DBSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: '10.${self:custom.network.classB}.48.0/20'
      Tags:
      - Key: Name
        Value: !Join
                 - '_'
                 - - '10.${self:custom.network.classB}.0.0/16'
                   - !Select [1, !GetAZs '']
                   - 'Private'
      - Key: Reach
        Value: private
  DBSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: '10.${self:custom.network.classB}.80.0/20'
      Tags:
      - Key: Name
        Value: !Join
                 - '_'
                 - - '10.${self:custom.network.classB}.0.0/16'
                   - !Select [2, !GetAZs '']
                   - 'Private'
      - Key: Reach
        Value: private
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Database"
      SubnetIds:
      - Ref: DBSubnetA
      - Ref: DBSubnetB
      - Ref: DBSubnetC


Outputs:
  CidrBlock:
    Description: 'The set of IP addresses for the VPC'
    Value: !GetAtt 'VPC.CidrBlock'
