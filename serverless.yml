service: TEMPLATE
# app: TEMPLATE
# org: myorg

plugins:
  - serverless-python-requirements
  - serverless-pseudo-parameters
  - serverless-wsgi

custom:
  stackName: ${self:service}-${self:provider.stage}
  xray: ''  # AWS Xray tracing of requests, queries. Set to 'Active' to actively trace.
  db:
    dbname: ${self:custom.stackName}
    minCapacity: 2
    maxCapacity: 4
    secondsUntilAutoPause: 43200 # if not stage=='prd'
  layers:
    psycopg: "arn:aws:lambda:${self:provider.region}:898466741470:layer:psycopg2-py37:1"
    default: []
      # - ${self:custom.layers.psycopg}
  secrets:
    prefix: "${self:service}/${self:provider.stage}"
    rds: "${self:custom.secrets.prefix}/rds/credentials"
  network:
    classB: 10 # second octet of VPC CIDR block (10.classB.0.0/16)
  bastion:  # EC2 host to access database
    # sshKeyPairName: ''  # set this to enable bastion ec2 instance
    alertEmails: 'me@mydomain.xyz'  # get SNS notifications of alarms at this address
    banner: https://ops.jetbridge.com/public/banner.txt
    bootstrap: https://ops.jetbridge.com/public/bastion_bootstrap.sh
    instanceType: t3a.nano
    tenancy: default
    bannerEnabled: 'true'
    tcpForwardingEnabled: 'true'
    x11ForwardingEnabled: 'false'
    logRetentionInDays: 731

  # plugins:
  wsgi:
    app: app.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: false
    useDownloadCache: true
    useStaticCache: true
    noDeploy:
      - psycopg2 # provided by layer
      - psycopg2-binary # provided by layer
      - boto3
      - botocore
      - s3transfere
      - docutils
    slim: true
    slimPatternsAppendDefaults: false  # need dist-info for sqlalchemy plugin
    slimPatterns:
      - '**/*.py[c|o]'
      - '**/__pycache__*'

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, 'qa'}
  region: ${opt:region, 'eu-west-1'}

  # x-ray
  tracing:
    lambda: ${self:custom.xray}

  environment:
    SECRET_PREFIX: ${self:custom.secrets.prefix}

    # aurora database credentials
    AURORA_SECRET_ARN: !Ref RDSInstanceSecret
    AURORA_CLUSTER_ARN: !Join [':', ["arn:aws:rds:#{AWS::Region}:#{AWS::AccountId}:cluster", !Ref DBCluster]]
    SQLALCHEMY_DATABASE_URI: !Join ['/', ["postgresql+auroradataapi://:@", !Ref DBCluster]]
    AURORA_DATA_API_ENABLED: 'true'
    DATABASE_NAME: !Ref DBCluster

    RDS_SECRET_NAME: ${self:custom.secrets.rds}
    LOAD_RDS_SECRET: "false"

    STAGE: ${self:provider.stage}
    XRAY: ${self:custom.xray}
    # LOAD_APP_SECRETS: true  # enable to load user-defined secrets
    # SQL_ECHO: true  # enable to print all SQL queries

  iamRoleStatements:
    - Effect: Allow
      Action: secretsmanager:GetSecretValue
      Resource:
        - "arn:aws:secretsmanager:#{AWS::Region}:#{AWS::AccountId}:secret:${self:custom.secrets.prefix}/*"
        - "arn:aws:secretsmanager:#{AWS::Region}:#{AWS::AccountId}:secret:${self:custom.secrets.prefix}/dev-*"
    - Effect: Allow
      Action: rds-data:BeginTransaction
      Resource: "arn:aws:rds:#{AWS::Region}:#{AWS::AccountId}:cluster:${self:custom.stackName}"

package:
  exclude:
    - node_modules/**
    - venv/**
    - TEMPLATE/instance.cfg
    - instance.cfg
    - doc/**
    - "**/__pycache__/**"
    - "**/__pycache__"
    - ".#*"
    - ".bento/**"

functions:
  app: # main flask entry point
    handler: wsgi_handler.handler
    events:
      - http: ANY /
      - http: "ANY {proxy+}"
    memorySize: 512
    layers: ${self:custom.layers.default}
    timeout: 10

  seed:
    handler: TEMPLATE.commands.seed_handler
    layers: ${self:custom.layers.default}
    timeout: 120

  initDb:
    handler: TEMPLATE.commands.init_handler
    layers: ${self:custom.layers.default}
    timeout: 300

  migrate:
    handler: TEMPLATE.commands.migrate_handler
    timeout: 900
    layers: ${self:custom.layers.default}

resources:
  - ${file(cloudformation/vpc.yml)}
  - ${file(cloudformation/db/aurora-serverless.yml)}
  - ${file(cloudformation/bastion.yml)}
